package CoreConcepts;

import java.util.ArrayList;
import java.util.List;

/**
 * Think stream like a pipeline through which our collection elements pass
 * through while passing various operations like filtering, sorting etc can
 * applied useful when bulk processing as it can do parallel processing
 * 
 * step1: create/open stream of collection step2: add intermediate operations
 * like filter, sorted, map, distinct etc It transform one stream to another so
 * that more operations can be applied these are lazy operations -> gets
 * executed only when terminal operation is invoked step3: termination
 * operation: collect, reduce, count etc.. , it will close the stream, no more
 * operations can be added original collection is affected, you'll get a new
 */

public class Stream {
	public static void main() {
		List<Integer> salary = new ArrayList<Integer>();
		salary.add(1000);
		salary.add(2000);
		salary.add(3000);
		salary.add(4000);
		salary.add(5000);

		// get count of salary >= 3000

		long cnt = salary.stream().filter((Integer s) -> {
			return s >= 3000;
		}).count();
		System.out.println(cnt);
		System.out.println("hello");
	}

}
