package Practice;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

class Test1 {
	public static void m() {
		System.out.println("test1 static");
	}
}

class Test2 extends Test1 {
	
	// hides (compile time) the Test1 m, otherwise Test2.m() would point to Test1.m()
	public static void m() {
		System.out.println("test2 static");
	}
}

public class Live {
	public static void main(String args[]) {
		System.out.println("hello");
		
		String s1 = "11";
		String s3 = "11";
		String s2 = new String("11");
		String s4 = new String("11");
		System.out.println(s1==s3);
		System.out.println(s3.equals(s2));
		System.out.println(s2.equals(s3));
		System.out.println(s1==s2);
		System.out.println(s1.equals(s2));
		System.out.println(s2.equals(s1));
		System.out.println(s4==s2);
		System.out.println(s4.equals(s2));
		System.out.println(s2.equals(s4));
		
		
		Test1.m();
		Test2.m();
		
		Queue<Integer> q = new LinkedList<Integer>();
		q.add(1);
		q.remove();
		q.peek();
		
		
		Stack<Integer> s = new Stack<Integer>();
		
		Deque<Integer> dq = new ArrayDeque<Integer>();
		
		
		
	}
}
