package CoreConcepts;

/**
 * Functional interface - interface with 1 abstract method
 * Lambda expression is a way implementing funcitonal interface
 * 
 */

@FunctionalInterface // not required
interface FunctionalIntEx {
	
	// only 1 abstract method
	void print(String s);
	
	// inherited from Object, no need to impl in class
	String toString();
	
	
	// not abstract
	private void m1() {
		
	}
	// not abstract
	static void m2() {
		
	}
	// not abstract
	private static void m3() {
		
	}
	
	default void print() {
		System.out.println("default");
	}
}

/*
 * How can we implement functional interface
 */

class FunctionalIntExImpl implements FunctionalIntEx {
	public void print(String s) {
		System.out.println(s);
	}
}


public class Lambda {
	public static void main(String[] args) {
		// allowed 
		FunctionalIntEx.m2();
		
		// M2 of implementing Functional interface
		FunctionalIntEx ob = new FunctionalIntEx() {
			public void print(String s) {
				System.out.println(s);
			}
		};
		
		ob.print("anonymous method");
	}

}
